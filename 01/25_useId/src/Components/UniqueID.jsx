import React from 'react'
import { useId } from 'react'

const UniqueID = () => {
    const id = useId() // Generate a unique ID for this component instance
  return (
    <div>
        <label htmlFor={`${id}-email`}>Email</label>
        <input type="email" id={`${id}-email`} />
        <label htmlFor={`${id}-password`}>Password</label>
        <input type="password" id={`${id}-password`} />
    </div>
  )
}

export default UniqueID

/*
Key Points:

useId Hook:
Inside the UniqueID component, useId is called to generate a unique ID. This ID is consistent across renders and is generated by React to be unique for each instance of the component.
For instance, if you have multiple instances of UniqueID, each instance will have a different, unique ID.

Dynamic ID Assignment:
The id generated by useId is appended to the input element's id to ensure each input has a unique ID. For example, for an email input field, it uses ${id}-email as the ID, and for the password input, ${id}-password.
This ensures that each form field (like email and password) has unique IDs even when multiple UniqueID components are used in the same tree.

Label and htmlFor:
The label element uses the htmlFor attribute to associate the label with the corresponding input element. The value of htmlFor is set to the unique ID for the respective input field (e.g., htmlFor={${id}-email}).
This is essential for accessibility because it allows screen readers to correctly associate labels with form inputs.
*/